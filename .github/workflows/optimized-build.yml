name: Optimized Palace Build
on:
  pull_request:
    branches: [develop, hotfix, beta]
    types: [closed]
  workflow_dispatch:

env:
  BUILD_CONTEXT: ci
  XCODE_VERSION: "16.2"

jobs:
  check-version:
    runs-on: macos-15
    outputs:
      should_upload: ${{ steps.checkVersion.outputs.version_changed }}
      cache_key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Set up Xcode ${{ env.XCODE_VERSION }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Checkout main repo and submodules
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.CI_GITHUB_ACCESS_TOKEN }}
          fetch-depth: 0  # Full history for better caching

      - id: cache-key
        name: Generate Cache Key
        run: |
          # Create composite cache key from multiple sources
          CARTFILE_HASH=$(shasum -a 256 Cartfile* 2>/dev/null | shasum -a 256 | cut -d' ' -f1 || echo "no-cartfile")
          PROJECT_HASH=$(shasum -a 256 Palace.xcodeproj/project.pbxproj | cut -d' ' -f1)
          XCODE_HASH=$(xcodebuild -version | shasum -a 256 | cut -d' ' -f1)
          CACHE_KEY="palace-deps-${CARTFILE_HASH}-${PROJECT_HASH}-${XCODE_HASH}"
          echo "key=${CACHE_KEY}" >> $GITHUB_OUTPUT

      - id: checkVersion
        name: Check Build Version
        run: ./scripts/ios-check-version.sh

  optimized-build:
    runs-on: macos-15
    needs: check-version
    if: github.event.pull_request.merged == true && needs.check-version.outputs.should_upload == '1'
    steps:
      - name: Set up Xcode ${{ env.XCODE_VERSION }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Checkout repositories (parallel)
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.CI_GITHUB_ACCESS_TOKEN }}

      # Parallel repository checkouts
      - name: Checkout additional repos in parallel
        run: |
          # Checkout multiple repos in parallel
          git clone https://github.com/ThePalaceProject/ios-binaries.git ios-binaries &
          git clone https://github.com/ThePalaceProject/mobile-certificates.git mobile-certificates &
          wait
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_ACCESS_TOKEN }}

      - name: Checkout Adobe RMSDK (with LFS caching)
        uses: ./.github/actions/checkout-adobe
        with:
          token: ${{ secrets.CI_GITHUB_ACCESS_TOKEN }}

      # Multi-level caching strategy
      - name: Cache Carthage dependencies
        uses: actions/cache@v4
        with:
          path: |
            Carthage/Build
            ~/Library/Caches/org.carthage.CarthageKit
          key: ${{ needs.check-version.outputs.cache_key }}-carthage
          restore-keys: |
            palace-deps-${{ hashFiles('Cartfile*') }}-carthage-
            palace-deps-carthage-

      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: |
            Build/DerivedData
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-derived-${{ hashFiles('Palace.xcodeproj/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-derived-

      - name: Cache Build Settings
        uses: actions/cache@v4
        with:
          path: .build-cache
          key: ${{ runner.os }}-build-settings-${{ hashFiles('Palace.xcodeproj/project.pbxproj') }}

      - name: Setup repo with DRM
        run: ./scripts/setup-repo-drm.sh

      # Use optimized dependency building
      - name: Build dependencies (optimized)
        run: |
          if [ -f "./scripts/build-carthage-optimized.sh" ]; then
            ./scripts/build-carthage-optimized.sh
          else
            ./scripts/build-3rd-party-dependencies.sh
          fi

      - name: Install provisioning profile
        run: ./scripts/install-profile.sh
        env:
          CI_APPSTORE_MP_BASE64: ${{ secrets.CI_APPSTORE_MP_BASE64 }}
          CI_ADHOC_MP_BASE64: ${{ secrets.CI_ADHOC_MP_BASE64 }}
          CI_DISTRIBUTION_CERT_BASE64: ${{ secrets.CI_DISTRIBUTION_CERT_BASE64 }}
          CI_DISTRIBUTION_CERT_PW: ${{ secrets.CI_DISTRIBUTION_CERT_PW }}
          CI_KEYCHAIN_PW: ${{ secrets.CI_KEYCHAIN_PW }}
          CI_APPLE_FASTLANE_JSON: ${{ secrets.CI_APPLE_FASTLANE_JSON }}

      # Parallel build and export steps
      - name: Build and export (parallel where possible)
        run: |
          # Export adhoc build
          ./scripts/xcode-export-adhoc.sh &
          ADHOC_PID=$!
          
          # Prepare release notes in parallel
          python3 -m venv .venv
          source .venv/bin/activate
          python3 -m pip install --upgrade pip requests
          ./scripts/create-release-notes.sh &
          NOTES_PID=$!
          
          # Wait for adhoc build
          wait $ADHOC_PID
          
          # Start appstore export
          ./scripts/xcode-export-appstore.sh &
          APPSTORE_PID=$!
          
          # Wait for release notes
          wait $NOTES_PID
          
          # Wait for appstore build
          wait $APPSTORE_PID
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_ACCESS_TOKEN }}

      - name: Verify and upload
        run: |
          echo "Release notes path: $RELEASE_NOTES_PATH"
          echo "Version: $VERSION_NUM"
          
          # Upload can happen in parallel with other cleanup tasks
          ./scripts/ios-binaries-upload.sh &
          
          # Additional verification
          ls -la Build/
          
          wait  # Wait for upload to complete
        env:
          RELEASE_NOTES_PATH: ${{ env.RELEASE_NOTES_PATH }}
          VERSION_NUM: ${{ env.VERSION_NUM }}

      # Store build artifacts for analysis
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs-${{ github.run_id }}
          path: |
            Build/logs/
            .build-cache/
            fastlane/report.xml
          retention-days: 7

      # Performance reporting
      - name: Build performance summary
        if: always()
        run: |
          echo "## Build Performance Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Build started: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- Xcode version: ${{ env.XCODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Runner: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f ".build-cache/timing.log" ]; then
            echo "### Build Times" >> $GITHUB_STEP_SUMMARY
            cat .build-cache/timing.log >> $GITHUB_STEP_SUMMARY
          fi 